# -*- coding: utf-8 -*-
"""Untitled49.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D1OAajTgAfIy_-ulzi9-DMO77Euc8qPy
"""

import pandas as pd

# Manually enter file paths after uploading
step1_file_path = "/content/Step1.csv"
step2_file_path = "/content/Step2.csv"

# Load data
step1_df = pd.read_csv(step1_file_path, encoding='utf-8', low_memory=False)
step2_df = pd.read_csv(step2_file_path, encoding='latin1', engine='python', on_bad_lines='skip')

# Continue with normalization steps...

import pandas as pd
import io
from google.colab import files

import pandas as pd

# üîπ Step 1: Manually Set File Paths in Colab
step1_file_path = "/content/Step1.csv"  # Adjust if necessary
step2_file_path = "/content/Step2.csv"

# üîπ Step 2: Load CSV Files with Encoding Handling
step1_df = pd.read_csv(step1_file_path, encoding='utf-8', low_memory=False)
step2_df = pd.read_csv(step2_file_path, encoding='latin1', engine='python', on_bad_lines='skip')

# üîπ Step 3: Display Data Preview
print("Step 1 Data:")
display(step1_df.head())

print("Step 2 Data:")
display(step2_df.head())

# üîπ Step 3: Convert Data to Long Format (1NF Normalization)
step1_long = step1_df.melt(id_vars=["Country Name", "Country Code", "Series Name", "Series Code"],
                           var_name="Year", value_name="Value")

step2_long = step2_df.melt(id_vars=["Country Name", "Country Code", "Series Name", "Series Code"],
                           var_name="Year", value_name="Value")

# Extract Year from column names
step1_long["Year"] = step1_long["Year"].str.extract("(\d{4})").astype(int)
step2_long["Year"] = step2_long["Year"].str.extract("(\d{4})").astype(int)

# Rename Columns for Consistency
for df in [step1_long, step2_long]:
    df.rename(columns={
        "Country Name": "Name",
        "Country Code": "Country_ID",
        "Series Name": "Indicator_Name",
        "Series Code": "Indicator_ID",
    }, inplace=True)

# üîπ Step 4: Create Separate Tables for Normalization (2NF & 3NF)
# Countries Table
countries_df = pd.concat([step1_long[['Country_ID', 'Name']], step2_long[['Country_ID', 'Name']]]).drop_duplicates().reset_index(drop=True)

# Indicators Table
indicators_df = pd.concat([step1_long[['Indicator_ID', 'Indicator_Name']], step2_long[['Indicator_ID', 'Indicator_Name']]]).drop_duplicates().reset_index(drop=True)

# Normalized Data Table
normalized_data_df = pd.concat([step1_long[['Country_ID', 'Indicator_ID', 'Year', 'Value']],
                                step2_long[['Country_ID', 'Indicator_ID', 'Year', 'Value']]]).reset_index(drop=True)

# üîπ Step 5: Display Normalized Tables
print("Countries Table:")
display(countries_df.head())

print("Indicators Table:")
display(indicators_df.head())

print("Normalized Data Table:")
display(normalized_data_df.head())

# üîπ Step 6: Save Normalized Data to CSV (Optional)
countries_df.to_csv("Countries_Normalized.csv", index=False)
indicators_df.to_csv("Indicators_Normalized.csv", index=False)
normalized_data_df.to_csv("Data_Normalized.csv", index=False)

print("‚úÖ Normalized CSV files saved successfully!")

import pandas as pd
from google.colab import files

# üîπ Step 1: Save the Normalized Data as CSV
countries_df.to_csv("Countries_Normalized.csv", index=False)
indicators_df.to_csv("Indicators_Normalized.csv", index=False)
normalized_data_df.to_csv("Data_Normalized.csv", index=False)

print("‚úÖ Normalized CSV files saved successfully!")

# üîπ Step 2: Download the CSV Files
files.download("Countries_Normalized.csv")
files.download("Indicators_Normalized.csv")
files.download("Data_Normalized.csv")

import pandas as pd
from google.colab import files
import time  # To ensure proper execution

# üîπ Step 1: Save Normalized Data to CSV
countries_df.to_csv("Countries_Normalized.csv", index=False)
indicators_df.to_csv("Indicators_Normalized.csv", index=False)
normalized_data_df.to_csv("Data_Normalized.csv", index=False)

print("‚úÖ Normalized CSV files saved successfully!")

# üîπ Step 2: Download the CSV Files (with slight delay)
files.download("Countries_Normalized.csv")
time.sleep(2)

files.download("Indicators_Normalized.csv")
time.sleep(2)

files.download("Data_Normalized.csv")

# Check if data exists
print("Countries Table Size:", countries_df.shape)
print("Indicators Table Size:", indicators_df.shape)
print("Normalized Data Table Size:", normalized_data_df.shape)

import pandas as pd
import os

# Save CSV files
countries_df.to_csv("Countries_Normalized.csv", index=False)
indicators_df.to_csv("Indicators_Normalized.csv", index=False)
normalized_data_df.to_csv("Data_Normalized.csv", index=False)

# Verify file existence
files_created = []
for file in ["Countries_Normalized.csv", "Indicators_Normalized.csv", "Data_Normalized.csv"]:
    if os.path.exists(file):
        print(f"‚úÖ {file} successfully created.")
        files_created.append(file)
    else:
        print(f"‚ùå {file} was NOT created.")

# Show final result
if len(files_created) == 3:
    print("\nüéâ All normalized files are ready for download!")
else:
    print("\n‚ö†Ô∏è Some files are missing. Check data sources and try again.")

from google.colab import files

# Download only if the files exist
for file in ["Countries_Normalized.csv", "Indicators_Normalized.csv", "Data_Normalized.csv"]:
    if os.path.exists(file):
        files.download(file)